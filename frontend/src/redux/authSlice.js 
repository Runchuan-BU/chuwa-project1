// Redux (選用) 登入/登出邏輯

import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import client from '../client';

export const login = createAsyncThunk('auth/login', async (credentials) => {
  const res = await client.post('/auth/signin', credentials);
  return res.data;
});

export const signup = createAsyncThunk('auth/signup', async (formData) => {
  const res = await client.post('/auth/signup', formData);
  return res.data;
});

const authSlice = createSlice({
  name: 'auth',
  initialState: {
    user: null,
    token: null,
    status: 'idle',
  },
  reducers: {
    logout(state) {
      state.user = null;
      state.token = null;
    },
  },
  extraReducers: builder => {
    builder
      .addCase(login.fulfilled, (state, action) => {
        state.user = action.payload.user;
        state.token = action.payload.token;
      })
      .addCase(signup.fulfilled, (state, action) => {
        state.user = action.payload.user;
        state.token = action.payload.token;
      });
  },
});

export const { logout } = authSlice.actions;
export default authSlice.reducer;
